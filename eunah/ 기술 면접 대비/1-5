### **1. 세 가지 스키마 아키텍처(three-schema architecture)에 대해 설명하세요.**

세 가지 스키마 아키텍처는 데이터베이스 시스템을 물리적 데이터 저장소로부터 사용자 애플리케이션을 분리하기 위한 구조입니다. 이 아키텍처는 데이터 독립성을 제공하며, 세 가지 레벨로 구성되어 있습니다.

1. **외부 스키마(External Schema):**
    - 사용자나 애플리케이션의 관점에서의 데이터뷰를 정의합니다. 각 사용자는 자신이 필요로 하는 데이터만 볼 수 있으며, 그 외의 데이터는 숨겨집니다.
    - 외부 스키마는 보안 및 접근 제어를 용이하게 하며, 논리적 데이터 모델을 사용하여 정의됩니다.
2. **개념 스키마(Conceptual Schema):**
    - 데이터베이스 전체의 논리적 구조를 정의합니다. 전체적인 엔터티, 관계, 제약 조건, 데이터 유형 등을 기술하며, 물리적인 저장 구조에 대한 세부 사항은 포함하지 않습니다.
    - 이 스키마는 데이터베이스의 통합된 논리적 뷰를 제공하며, 사용자나 애플리케이션의 변경 없이 내부 저장소 변경을 가능하게 합니다.
3. **내부 스키마(Internal Schema):**
    - 데이터의 물리적 저장 방식을 정의합니다. 파일 구조, 인덱스, 접근 경로 등의 세부 사항을 포함합니다.
    - 물리적 데이터 모델을 통해 데이터가 실제로 어떻게 저장되고 접근되는지를 기술합니다.

이 세 가지 레벨의 독립성은 데이터베이스 시스템의 유지보수성과 유연성을 증가시킵니다. 예를 들어, 물리적 스토리지 구조를 변경하더라도 개념적 및 외부 스키마는 변경할 필요가 없으므로 시스템의 안정성과 데이터 무결성을 유지할 수 있습니다.

### **2. 관계형 데이터 모델에서 'NULL' 값의 의미와 사용 사례를 설명해보세요.**

**모범 답안:**
관계형 데이터 모델에서 `NULL` 값은 데이터베이스 테이블의 특정 속성에서 값이 존재하지 않거나 알 수 없거나 해당 사항이 없음을 나타냅니다. `NULL`은 "값이 없다"는 의미로, 숫자 0이나 빈 문자열과는 다릅니다.

`NULL`의 사용 사례는 다음과 같습니다:

1. **값이 존재하지 않음:** 예를 들어, 학생 테이블에서 아직 졸업하지 않은 학생의 졸업일을 `NULL`로 설정할 수 있습니다.
2. **값이 알려지지 않음:** 고객 정보 테이블에서 고객의 전화번호를 모를 경우 해당 속성에 `NULL`을 저장할 수 있습니다.
3. **해당 사항 없음:** 주문 테이블에서 특정 주문에 대해 배송 추적 번호가 필요하지 않을 경우 `NULL` 값을 가질 수 있습니다.

`NULL` 값은 데이터를 입력할 때 유연성을 제공하며, 데이터가 없는 경우와 실제로 0이나 공백을 나타내야 하는 경우를 구분할 수 있게 해줍니다. 그러나 `NULL` 값은 계산에서 예기치 않은 결과를 초래할 수 있으므로 쿼리 작성 시 이를 고려한 처리가 필요합니다.

### **3. SQL에서 '테이블(table)'이란 무엇이며, '스키마(schema)'와의 차이점을 설명하세요.**

SQL에서 테이블(table)은 관계형 데이터베이스에서 데이터를 저장하기 위한 구조입니다. 테이블은 행(row)과 열(column)로 구성되며, 각 행은 개별 데이터 항목(튜플)을 나타내고, 각 열은 속성(attribute)을 나타냅니다. 예를 들어, `EMPLOYEE`라는 테이블이 있을 때, 각 열은 `id`, `name`, `position`, `salary`와 같은 속성을 가질 수 있으며, 각 행은 특정 직원의 정보를 포함합니다.

한편, 스키마(schema)는 데이터베이스의 논리적 구조를 정의하는데 사용되는 용어로, 테이블, 뷰, 인덱스, 제약조건, 저장 프로시저 등 데이터베이스 객체들의 집합을 의미합니다. MySQL에서는 데이터베이스와 스키마를 같은 의미로 사용하지만, 다른 RDBMS에서는 데이터베이스 안에 여러 스키마가 존재할 수 있으며, 스키마는 하나의 네임스페이스로 작동합니다. 예를 들어, PostgreSQL에서는 스키마가 데이터베이스 내의 네임스페이스를 구분하는 데 사용됩니다.

요약하자면, **테이블**은 데이터를 저장하는 구조적인 단위인 반면, **스키마**는 테이블을 포함한 데이터베이스 객체들의 논리적 그룹이나 설계 구조를 나타냅니다.

### 4. **INSERT 문을 사용할 때 주의해야 할 점은 무엇인가요?**

1. **테이블 구조와 일치하는 데이터 삽입**: VALUES 절에 제공하는 값의 수와 순서가 테이블의 구조와 일치해야 합니다. 예를 들어, `INSERT INTO table_name VALUES (value1, value2, ...)`에서 테이블의 열 개수와 제공하는 값의 개수가 일치해야 합니다.
2. **데이터 타입 일치**: 각 열에 삽입되는 값의 데이터 타입이 테이블의 스키마에 정의된 데이터 타입과 일치해야 합니다. 예를 들어, 정수형 열에 문자열을 삽입하려고 하면 오류가 발생할 수 있습니다.
3. **NULL 제약 조건 확인**: 테이블의 특정 열이 NOT NULL 제약 조건을 가지고 있는 경우, 해당 열에 NULL 값을 삽입하면 오류가 발생합니다. 따라서 이러한 열에 적절한 값을 제공해야 합니다.
4. **중복 키 제약 조건**: PRIMARY KEY나 UNIQUE 제약 조건이 있는 열에 중복된 값을 삽입하려고 하면 오류가 발생합니다. 따라서 이러한 열의 값은 고유해야 합니다.
5. **DEFAULT 값 사용**: 열에 기본값이 정의되어 있는 경우, 해당 열에 값을 제공하지 않으면 기본값이 자동으로 사용됩니다. 이를 활용하여 코드의 간결함과 가독성을 높일 수 있습니다.
6. **데이터 일관성 유지**: 외래 키 제약 조건이 있는 경우, 참조 무결성을 유지해야 합니다.

### 5. **DISTINCT 키워드를 사용하는 이유와 사용 방법에 대해 설명해 주세요.**

DISTINCT 키워드는 쿼리 결과에서 중복된 행을 제거할 때 사용합니다. 즉, 쿼리 결과에서 유일한 값만 반환하도록 합니다. 기본 구문은 다음과 같습니다:

```sql
SELECT DISTINCT column1, column2, ...
FROM table_name;
```

예를 들어, 디자이너들이 참여하고 있는 프로젝트들의 ID와 이름을 중복 없이 조회하려면 다음과 같은 쿼리를 사용할 수 있습니다:

```sql
SELECT DISTINCT p.project_id, p.project_name
FROM project p
INNER JOIN employee e
ON p.project_id = e.project_id
WHERE e.position = 'Designer';
```

이 쿼리는 디자이너들이 참여하고 있는 프로젝트의 ID와 이름을 중복 없이 반환합니다.
