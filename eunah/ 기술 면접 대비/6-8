
### 1. **`SELECT` 문에서 서브쿼리란 무엇이며, 사용 사례를 설명해 주세요.**

#### 모범 답안:
서브쿼리(Subquery)는 SQL에서 다른 쿼리 내에 중첩되어 있는 쿼리를 말합니다. 일반적으로 `SELECT`, `INSERT`, `UPDATE`, 또는 `DELETE` 문 안에 사용될 수 있으며, 보통 괄호 `()`로 둘러싸여 있습니다. 서브쿼리는 메인 쿼리의 조건을 정의하거나, 데이터를 필터링하는 데 유용합니다. 서브쿼리를 사용하는 주요 사례는 다음과 같습니다:

1. **조건부 데이터 조회**: 특정 조건에 맞는 데이터를 조회할 때 서브쿼리를 사용해 원하는 조건을 충족하는 데이터를 필터링할 수 있습니다. 예를 들어, 부서 테이블에서 직원 수가 10명 이상인 부서의 이름을 조회할 수 있습니다.
    ```sql
    SELECT department_name
    FROM departments
    WHERE department_id IN (
        SELECT department_id
        FROM employees
        GROUP BY department_id
        HAVING COUNT(*) >= 10
    );
    ```
2. **집계 함수와 함께 사용**: 서브쿼리를 사용하여 집계 함수를 실행하고, 그 결과를 메인 쿼리에서 활용할 수 있습니다. 예를 들어, 가장 높은 연봉을 받는 직원의 이름을 찾는 경우에 서브쿼리를 사용할 수 있습니다.
    ```sql
    SELECT name
    FROM employees
    WHERE salary = (
        SELECT MAX(salary)
        FROM employees
    );
    ```

### 2. **서브쿼리와 조인의 차이점은 무엇인가요? 두 가지 사용 사례를 비교해 보세요.**

#### 모범 답안:
서브쿼리와 조인은 모두 여러 테이블에서 데이터를 조회할 때 사용되지만, 사용하는 방식과 성능에서 차이가 있습니다:

- **서브쿼리**는 한 쿼리 내에 또 다른 쿼리를 중첩하여 사용합니다. 서브쿼리는 보통 메인 쿼리의 `WHERE` 절이나 `FROM` 절에 사용되며, 필터링의 역할을 합니다.
- **조인**은 여러 테이블을 병합하여 한 번에 데이터를 가져오는 방식입니다. 조인은 `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN`, `FULL JOIN`과 같은 여러 유형이 있으며, 각 테이블의 관련 데이터를 결합하여 새로운 결과 세트를 만듭니다.

**비교 사례:**
1. **서브쿼리 사용 예제**:
    ```sql
    SELECT name
    FROM employees
    WHERE department_id = (
        SELECT department_id
        FROM departments
        WHERE department_name = 'Sales'
    );
    ```
   위의 쿼리는 `Sales` 부서의 `department_id`를 찾기 위해 서브쿼리를 사용하고, 그 부서에 속한 직원의 이름을 찾습니다.

2. **조인 사용 예제**:
    ```sql
    SELECT e.name
    FROM employees e
    INNER JOIN departments d ON e.department_id = d.department_id
    WHERE d.department_name = 'Sales';
    ```
   이 쿼리는 조인을 사용하여 `employees` 테이블과 `departments` 테이블을 연결하고, `Sales` 부서의 직원 이름을 찾습니다.

**차이점**:
- 서브쿼리는 이해하고 관리하기 쉽지만, 성능이 떨어질 수 있습니다.
- 조인은 더 복잡한 구조를 만들 수 있지만, 대량의 데이터 처리 시 성능이 우수합니다.

### 3. **상관 서브쿼리(Correlated Subquery)란 무엇이며, 그 예시를 설명해 주세요.**

#### 모범 답안:
상관 서브쿼리(Correlated Subquery)는 서브쿼리가 메인 쿼리의 각 행에 대해 한 번씩 실행되며, 메인 쿼리의 값을 참조하는 쿼리입니다. 이는 서브쿼리가 독립적으로 실행될 수 없고, 메인 쿼리의 각 행과 상관관계를 가지기 때문입니다.

**예시**: 각 직원이 속한 부서에서 최고 연봉보다 낮은 연봉을 받는 직원을 찾는 경우:
```sql
SELECT name, salary
FROM employees e1
WHERE salary < (
    SELECT MAX(salary)
    FROM employees e2
    WHERE e1.department_id = e2.department_id
);
```
이 예시에서 내부 서브쿼리는 `e1.department_id`를 참조하여 메인 쿼리의 각 직원의 부서에서 최고 연봉을 비교합니다.

### 4. **`HAVING` 절에서 서브쿼리를 사용하는 방법을 설명해 주세요.**

#### 모범 답안:
`HAVING` 절은 그룹화된 데이터에 대한 조건을 필터링하는 데 사용됩니다. 서브쿼리는 `HAVING` 절에서 특정 그룹의 조건을 정의하기 위해 사용될 수 있습니다. 예를 들어, 직원 수가 평균 이상인 부서를 조회하는 경우 서브쿼리를 활용할 수 있습니다:

```sql
SELECT department_id, COUNT(*)
FROM employees
GROUP BY department_id
HAVING COUNT(*) > (
    SELECT AVG(dept_count)
    FROM (
        SELECT COUNT(*) AS dept_count
        FROM employees
        GROUP BY department_id
    ) AS department_counts
);
```
이 쿼리는 서브쿼리를 사용하여 각 부서의 직원 수 평균을 계산하고, 그 평균보다 높은 부서만을 `HAVING` 절을 통해 필터링합니다.

### 5. **서브쿼리를 사용하는 대신 조인을 사용해야 하는 경우는 언제인가요?**

#### 모범 답안:
서브쿼리 대신 조인을 사용하는 것이 더 적합한 경우는 성능이 중요한 대량의 데이터 처리 상황입니다. 서브쿼리는 메인 쿼리의 각 행마다 별도의 쿼리를 실행할 수 있어 성능 저하가 발생할 수 있습니다. 반면, 조인은 여러 테이블을 한 번에 결합하여 데이터를 처리하므로 더 효율적입니다.

**예시**: 특정 부서의 모든 직원 정보를 가져오는 상황을 고려해 보겠습니다.

- **서브쿼리 사용 시**:
    ```sql
    SELECT *
    FROM employees
    WHERE department_id IN (
        SELECT department_id
        FROM departments
        WHERE department_name = 'Sales'
    );
    ```
- **조인 사용 시**:
    ```sql
    SELECT e.*
    FROM employees e
    INNER JOIN departments d ON e.department_id = d.department_id
    WHERE d.department_name = 'Sales';
    ```

이 경우, 조인을 사용하면 데이터를 더 빠르고 효율적으로 가져올 수 있습니다. 특히 여러 개의 레코드가 결합되는 복잡한 데이터 구조에서 조인이 더 나은 성능을 제공합니다.